// Generated Code, Do not modify
import {
  checkIfFieldUpdated,
  isIdPresent,
  TBaseUseCase,
  TBaseUseCaseCheckChanged,
  TExecuteQuery,
  TGetModelUseCase,
  TMakeGetModelUseCase,
  TModelKey,
} from "@five12days/core";


import { readCustomerOrderUseCase_ } from "../useCases/customerOrderUseCases.js";
import { makeCustomerOrder, TCustomerOrder } from "./customerOrder.gen.js";

export type TCustomerOrderKey = {
  orderNo: number;
};

export const makeReadCustomerOrderBaseUseCase = ({
  repository,
  executeQuery,
}: TMakeGetModelUseCase<TCustomerOrder>) => {
  return ({ keys, columns, filter, orderBy, page, pageSize }: TGetModelUseCase<TCustomerOrderKey>) => {
    if (repository.readModel === undefined)
      throw new Error(
        "Repository method of getModel was not defined in customerOrder usecase",
      );

    return repository.readModel({
      model: "customerOrder",
      key: keys === undefined ? undefined : isIdPresent(keys) ? keys.id : keys,
      columns: columns,
      filter: filter,
      orderBy: orderBy,
      page: page,
      pageSize: pageSize
    });
  };
};

export const makeCreateCustomerOrderBaseUseCase = ({
  generateId,
  validateModel,
  repository,
  executeQuery,
}: TBaseUseCase<TCustomerOrder>) => {
  return (modelData: Partial<TCustomerOrder>) => {
    if (repository.createModel === undefined) {
      throw new Error(
        "Repository method of createModel was not defined in customerOrder usecase",
      );
    }

    if (generateId === undefined) {
      throw new Error("Please provide a generateId method");
    }

    const createCustomerOrder = makeCustomerOrder({
      validateModel,
    });

    // Generate ID
    modelData.id = generateId();
    // Set CreatedAt
    const sysDate = new Date();
    modelData.createdAt = sysDate.toISOString();
    // Set UpdatedAt
    modelData.updatedAt = modelData.createdAt;
    // Run validation, check exist, column validation will be handled by zod
    // Check if a record with the same id exists
    // Check if the realtionships are valid, i.e primary keys match etc
    // Other validation, such as max, min, length, mandatory checks will be handled by zod
    const customerOrder = createCustomerOrder(modelData);

    validateRelationships_(customerOrder, executeQuery, "INSERT");

    return repository.createModel({
      model: "customerOrder",
      modelData: customerOrder,
    });
  };
};

export const makeUpdateCustomerOrderBaseUseCase = ({
  validateModel,
  repository,
  executeQuery,
}: TBaseUseCase<TCustomerOrder>) => {
  return async (modelData: TCustomerOrder) => {
    if (repository.updateModel === undefined) {
      throw new Error(
        "Repository method of updateModel was not defined in customerOrder usecase",
      );
    }

    if (repository.readModel === undefined) {
      throw new Error(
        "Repository method of readModel was not defined in customerOrder usecase",
      );
    }

    const customerOrder = await checkCustomerOrderChanged({
      validateModel,
      repository,
      modelData,
      executeQuery,
    });

    validateRelationships_(customerOrder, executeQuery, "MODIFY");

    // Set UpdatedAt
    const sysDate = new Date();
    modelData.updatedAt = sysDate.toISOString();

    return repository.updateModel({
      model: "customerOrder",
      key: customerOrder.id,
      modelData: customerOrder,
    });
  };
};

export const makeDeleteCustomerOrderBaseUseCase = ({
  validateModel,
  repository,
  executeQuery,
}: TBaseUseCase<TCustomerOrder>) => {
  return async (modelData: TCustomerOrder) => {
    if (repository.deleteModel === undefined) {
      throw new Error(
        "Repository method of deleteModel was not defined in customerOrder usecase",
      );
    }

    const customerOrder = await checkCustomerOrderChanged({
      validateModel,
      repository,
      modelData,
      executeQuery,
    });

    return repository.deleteModel({
      model: "customerOrder",
      key: customerOrder.id,
    });
  };
};

const checkCustomerOrderChanged = async ({
  validateModel,
  repository,
  modelData,
  executeQuery,
}: TBaseUseCaseCheckChanged<TCustomerOrder>) => {
  const createCustomerOrder = makeCustomerOrder({
    validateModel,
  });
  const readCustomerOrder = makeReadCustomerOrderBaseUseCase({
    repository,
    executeQuery
  });
  const newCustomerOrder = createCustomerOrder(modelData);
  const oldCustomerOrder = await readCustomerOrder({
    keys: { id: newCustomerOrder.id },
  });

  // Check if the not updatable attributes were updated
  checkIfFieldUpdated("orderNo", newCustomerOrder.orderNo, oldCustomerOrder[0].orderNo)

  if (newCustomerOrder.updatedAt !== oldCustomerOrder[0].updatedAt)
    throw new Error("CustomerOrder is being modified by another user");
  return newCustomerOrder;
};


const validateRelationships_ = async (
  customerOrder: TCustomerOrder,
  executeQuery: TExecuteQuery,
  action: 'INSERT' | 'MODIFY'
) => {
  // Check if a model exist for the same keys
  await checkCustomerOrderExist_(
    { orderNo: customerOrder.orderNo }, // Generate from keys
    executeQuery,
    action === "INSERT" ? "TRIGGER_WHEN_EXIST" : "TRIGGER_WHEN_NOT_EXIST",
  );

  // Check relationships
  
};

export const checkCustomerOrderExist_ = async (
  customerOrder: TCustomerOrderKey | TModelKey,
  executeQuery: TExecuteQuery,
  triggerException:
    | "TRIGGER_WHEN_EXIST"
    | "TRIGGER_WHEN_NOT_EXIST"
    | "DO_NO_TRIGGER" = "DO_NO_TRIGGER",
) => {
  const existingCustomerOrder = await readCustomerOrderUseCase_(
    { keys: isIdPresent(customerOrder) ? { id: customerOrder.id } : { orderNo: customerOrder.orderNo } }, // Generate from keys
    executeQuery,
  );

  if (existingCustomerOrder.length > 0) {
    if (triggerException === "TRIGGER_WHEN_EXIST")
      throw new Error("CustomerOrder already exists");
    return true;
  }
  if (triggerException === "TRIGGER_WHEN_NOT_EXIST")
    throw new Error("CustomerOrder does not exist");
  return false;
};
