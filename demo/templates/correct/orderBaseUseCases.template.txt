// Generated Code, Do not modify
import {
  isIdPresent,
  TBaseUseCase,
  TBaseUseCaseCheckChanged,
  TModelKey,
} from "@five12days/core";

import { makeOrder, TOrder } from "./order.gen.js";

export type TOrderKey = {
  orderNo: number;
  totalAmount: number;
};

export const makeReadOrderBaseUseCase = ({ repository }: any) => {
  return (keys: TModelKey | TOrderKey) => {
    if (isIdPresent(keys)) {
      return repository.readModel(keys.id);
    }
    return repository.readModel(keys);
  };
};

export const makeCreateOrderBaseUseCase = ({
  generateId,
  validateModel,
  repository,
}: TBaseUseCase<TOrder>) => {
  return (modelData: TOrder) => {
    const createOrder = makeOrder({
      generateId,
      validateModel,
    });

    const order = createOrder(modelData);
    return repository.create(order);
  };
};

export const makeUpdateOrderBaseUseCase = ({
  generateId,
  validateModel,
  repository,
}: TBaseUseCase<TOrder>) => {
  return (modelData: TOrder) => {
    const order = checkOrderChanged({
      generateId,
      validateModel,
      repository,
      modelData,
    });
    repository.updateModel(order);
  };
};

export const makeDeleteOrderBaseUseCase = ({
  generateId,
  validateModel,
  repository,
}: TBaseUseCase<TOrder>) => {
  return (modelData: TOrder) => {
    const order = checkOrderChanged({
      generateId,
      validateModel,
      repository,
      modelData,
    });
    repository.deleteModel(order);
  };
};

const checkOrderChanged = ({
  generateId,
  validateModel,
  repository,
  modelData,
}: TBaseUseCaseCheckChanged<TOrder>) => {
  const createOrder = makeOrder({
    generateId,
    validateModel,
  });
  const readOrder = makeReadOrderBaseUseCase({
    repository,
  });
  const newOrder = createOrder(modelData);
  const oldOrder = readOrder({
    id: newOrder.id,
  });
  return newOrder;
};
