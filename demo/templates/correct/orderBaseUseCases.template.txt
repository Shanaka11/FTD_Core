// Generated Code, Do not modify
import {
  isIdPresent,
  TBaseUseCase,
  TBaseUseCaseCheckChanged,
  TGetModelUseCase,
  TMakeGetModelUseCase,
} from "@five12days/core";

import { makeOrder, TOrder } from "./order.gen.js";

export type TOrderKey = {
  orderNo: number;
  totalAmount: number;
};

export const makeReadOrderBaseUseCase = ({ repository }: TMakeGetModelUseCase) => {
  return ({ keys, columns, filter }: TGetModelUseCase<TOrderKey>) => {
    if (repository.readModel === undefined)
      throw new Error(
        "Repository method of getModel was not defined in order usecase",
      );

    return repository.readModel({
      model: "order",
      key: keys === undefined ? undefined : isIdPresent(keys) ? keys.id : keys,
      columns: columns,
      filter: filter,
    });
  };  
};

export const makeCreateOrderBaseUseCase = ({
  generateId,
  validateModel,
  repository,
}: TBaseUseCase<TOrder>) => {
  return (modelData: TOrder) => {
    if (repository.createModel === undefined) {
      throw new Error(
        "Repository method of createModel was not defined in order usecase",
      );
    }

    const createOrder = makeOrder({
      generateId,
      validateModel,
    });

    const order = createOrder(modelData);

    return repository.createModel({
      model: "order",
      modelData: order,
    });
  };  
};

export const makeUpdateOrderBaseUseCase = ({
  generateId,
  validateModel,
  repository,
}: TBaseUseCase<TOrder>) => {
  return (modelData: TOrder) => {
    if (repository.updateModel === undefined) {
      throw new Error(
        "Repository method of updateModel was not defined in order usecase",
      );
    }

    const order = checkOrderChanged({
      generateId,
      validateModel,
      repository,
      modelData,
    });

    repository.updateModel({
      model: "order",
      key: order.id,
      modelData: order,
    });
  };
};

export const makeDeleteOrderBaseUseCase = ({
  generateId,
  validateModel,
  repository,
}: TBaseUseCase<TOrder>) => {
  return (modelData: TOrder) => {
    if (repository.deleteModel === undefined) {
      throw new Error(
        "Repository method of deleteModel was not defined in order usecase",
      );
    }

    const order = checkOrderChanged({
      generateId,
      validateModel,
      repository,
      modelData,
    });

    repository.deleteModel({
      model: "order",
      key: order.id,
    });
  };
};

const checkOrderChanged = ({
  generateId,
  validateModel,
  repository,
  modelData,
}: TBaseUseCaseCheckChanged<TOrder>) => {
  const createOrder = makeOrder({
    generateId,
    validateModel,
  });
  const readOrder = makeReadOrderBaseUseCase({
    repository,
  });
  const newOrder = createOrder(modelData);
  const oldOrder = readOrder({
    keys: { id: newOrder.id },
  });
  return newOrder;
};
