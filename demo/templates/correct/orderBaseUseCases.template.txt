// Generated Code, Do not modify
import {
  isIdPresent,
  TBaseUseCase,
  TBaseUseCaseCheckChanged,
  TGetModelUseCase,
  TMakeGetModelUseCase,
} from "@five12days/core";

import { makeOrder, TOrder } from "./order.gen.js";

export type TOrderKey = {
  orderNo: number;
  totalAmount: number;
};

export const makeReadOrderBaseUseCase = ({
  repository,
}: TMakeGetModelUseCase<TOrder>) => {
  return ({ keys, columns, filter }: TGetModelUseCase<TOrderKey>) => {
    if (repository.readModel === undefined)
      throw new Error(
        "Repository method of getModel was not defined in order usecase",
      );

    return repository.readModel({
      model: "order",
      key: keys === undefined ? undefined : isIdPresent(keys) ? keys.id : keys,
      columns: columns,
      filter: filter,
    });
  };
};

export const makeCreateOrderBaseUseCase = ({
  generateId,
  validateModel,
  repository,
}: TBaseUseCase<TOrder>) => {
  return (modelData: Partial<TOrder>) => {
    if (repository.createModel === undefined) {
      throw new Error(
        "Repository method of createModel was not defined in order usecase",
      );
    }

    if (generateId === undefined) {
      throw new Error("Please provide a generateId method");
    }

    const createOrder = makeOrder({
      validateModel,
    });

    // Generate ID
    modelData.id = generateId();
    // Set CreatedAt
    const sysDate = new Date();
    modelData.createdAt = sysDate;
    // Set UpdatedAt
    modelData.updatedAt = sysDate;
    // Run validation, check exist, column validation will be handled by zod
    // Check if a record with the same id exists
    // Check if the realtionships are valid, i.e primary keys match etc
    // Other validation, such as max, min, length, mandatory checks will be handled by zod
    const order = createOrder(modelData);

    return repository.createModel({
      model: "order",
      modelData: order,
    });
  };
};

export const makeUpdateOrderBaseUseCase = ({
  validateModel,
  repository,
}: TBaseUseCase<TOrder>) => {
  return async (modelData: TOrder) => {
    if (repository.updateModel === undefined) {
      throw new Error(
        "Repository method of updateModel was not defined in order usecase",
      );
    }

    if (repository.readModel === undefined) {
      throw new Error(
        "Repository method of readModel was not defined in order usecase",
      );
    }

    const order = await checkOrderChanged({
      validateModel,
      repository,
      modelData,
    });

    // Set UpdatedAt
    const sysDate = new Date();
    modelData.updatedAt = sysDate;

    return repository.updateModel({
      model: "order",
      key: order.id,
      modelData: order,
    });
  };
};

export const makeDeleteOrderBaseUseCase = ({
  validateModel,
  repository,
}: TBaseUseCase<TOrder>) => {
  return async (modelData: TOrder) => {
    if (repository.deleteModel === undefined) {
      throw new Error(
        "Repository method of deleteModel was not defined in order usecase",
      );
    }

    const order = await checkOrderChanged({
      validateModel,
      repository,
      modelData,
    });

    return repository.deleteModel({
      model: "order",
      key: order.id,
    });
  };
};

const checkOrderChanged = async ({
  validateModel,
  repository,
  modelData,
}: TBaseUseCaseCheckChanged<TOrder>) => {
  const createOrder = makeOrder({
    validateModel,
  });
  const readOrder = makeReadOrderBaseUseCase({
    repository,
  });
  const newOrder = createOrder(modelData);
  const oldOrder = await readOrder({
    keys: { id: newOrder.id },
  });

  if (newOrder.updatedAt.toISOString() !== oldOrder[0].updatedAt.toISOString())
    throw new Error("Order is being modified by another user");
  return newOrder;
};
