import {
  executeTransaction,
  generateId,
  makeCreateModel,
  makeDeleteModel,
  makeReadModel,
  makeUpdateModel,
  TExecuteQuery,
  TGetModelUseCase,
  TRawData,
  validateModel,
} from "@five12days/core/dist/public";

import { customerOrderSchema, TCustomerOrder } from "../gen/customerOrder.gen";
import {
  makeCreateCustomerOrderBaseUseCase,
  makeDeleteCustomerOrderBaseUseCase,
  makeReadCustomerOrderBaseUseCase,
  makeUpdateCustomerOrderBaseUseCase,
  TCustomerOrderKey,
} from "../gen/customerOrderBaseUseCases.gen";

const validateCustomerOrderModel = (data: TRawData) => {
  return validateModel<TCustomerOrder>(customerOrderSchema, data);
};

// READ
export const readCustomerOrderUseCase_ = async (
  { keys, columns, filter, orderBy, page, pageSize }: TGetModelUseCase<TCustomerOrderKey>,
  executeQuery: TExecuteQuery,
) => {
  // Add business logic that should be executed before the core method
  const readCustomerOrderBaseUseCase = makeReadCustomerOrderBaseUseCase({
    repository: { readModel: makeReadModel(executeQuery) },
    executeQuery,
  });
  const customerOrders = await readCustomerOrderBaseUseCase({
    keys,
    columns,
    filter,
    orderBy,
    page,
    pageSize
  });
  // Add business logic that should be executed after the core method

  return customerOrders;
};

export const readCustomerOrderUseCase = async (data: TGetModelUseCase<TCustomerOrderKey>) => {
  try{

    const retData = await executeTransaction<
      TGetModelUseCase<TCustomerOrderKey>,
      TCustomerOrder[]
    >(data, readCustomerOrderUseCase_);
    return retData;

  } catch (e:unknown) {

    if( e instanceof(Error) ){
      console.error(e.message);
      return { error: e.message };
    };
    throw e;

  }
};

// CREATE
export const createCustomerOrderUseCase_ = async (
  customerOrderData: Partial<TCustomerOrder>,
  executeQuery: TExecuteQuery,
) => {
  // Add business logic that should be executed before the core method
  const createCustomerOrderBaseUseCase = makeCreateCustomerOrderBaseUseCase({
    generateId,
    validateModel: validateCustomerOrderModel,
    repository: {
      readModel: makeReadModel(executeQuery),
      createModel: makeCreateModel(executeQuery),      
    },
    executeQuery,
  });

  const createdCustomerOrder = await createCustomerOrderBaseUseCase(customerOrderData);
  // Add business logic that should be executed after the core method

  return createdCustomerOrder;
};

export const createCustomerOrderUseCase = async (data: Partial<TCustomerOrder>) => {
  try{

    const retData = await executeTransaction<Partial<TCustomerOrder>, boolean>(
      data,
      createCustomerOrderUseCase_,
    );
  
    if(retData) {
      return { message: "CustomerOrder created"};
    }
    return { error: "Unable to create CustomerOrder, please try again"};

  } catch (e:unknown) {
    if( e instanceof(Error) ){
      console.error(e.message);
      return { error: e.message };
    };
    throw e;
  }
};

// UPDATE
export const updateCustomerOrderUseCase_ = async (
  customerOrderData: TCustomerOrder,
  executeQuery: TExecuteQuery,
) => {
  // Add business logic that should be executed before the core method
  const updateCustomerOrderBaseUseCase = makeUpdateCustomerOrderBaseUseCase({
    generateId,
    validateModel: validateCustomerOrderModel,
    repository: {
      readModel: makeReadModel(executeQuery),
      updateModel: makeUpdateModel(executeQuery),      
    },
    executeQuery,
  });

  const updatedCustomerOrder = await updateCustomerOrderBaseUseCase(customerOrderData);
  // Add business logic that should be executed after the core method

  return updatedCustomerOrder;
};

export const updateCustomerOrderUseCase = async (data: TCustomerOrder) => {
  try{

    const retData = await executeTransaction<TCustomerOrder, boolean>(
      data,
      updateCustomerOrderUseCase_,
    );
  
    if(retData) {
      return { message: "CustomerOrder updated"};
    }
    return { error: "Unable to update CustomerOrder, please try again"};

  } catch (e:unknown) {

    if( e instanceof(Error) ){
      console.error(e.message);
      return { error: e.message };
    };
    throw e;

  }
};

// DELETE
export const deleteCustomerOrderUseCase_ = async (
  customerOrderData: TCustomerOrder,
  executeQuery: TExecuteQuery,
) => {
  // Add business logic that should be executed before the core method
  const deleteCustomerOrderBaseUseCase = makeDeleteCustomerOrderBaseUseCase({
    generateId,
    validateModel: validateCustomerOrderModel,
    repository: {
      readModel: makeReadModel(executeQuery),
      deleteModel: makeDeleteModel(executeQuery),      
    },
    executeQuery,
  });

  const deletedCustomerOrder = deleteCustomerOrderBaseUseCase(customerOrderData);
  // Add business logic that should be executed after the core method

  return deletedCustomerOrder;
};

export const deleteCustomerOrderUseCase = async (data: TCustomerOrder) => {
  try{

    const retData = await executeTransaction<TCustomerOrder, boolean>(
      data,
      deleteCustomerOrderUseCase_,
    );
  
    if(retData) {
      return { message: "CustomerOrder deleted"};
    }
    return { error: "Unable to delete CustomerOrder, please try again"};

  } catch (e:unknown) {

    if( e instanceof(Error) ){
      console.error(e.message);
      return { error: e.message };
    };
    throw e;

  }
};
