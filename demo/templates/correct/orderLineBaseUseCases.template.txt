// Generated Code, Do not modify
import {
  isIdPresent,
  TBaseUseCase,
  TBaseUseCaseCheckChanged,
  TGetModelUseCase,
  TMakeGetModelUseCase,
} from "@five12days/core";

import { makeOrderLine, TOrderLine } from "./orderLine.gen.js";

export type TOrderLineKey = {
  orderNo: number;
  lineNo: number;
};

export const makeReadOrderLineBaseUseCase = ({
  repository,
}: TMakeGetModelUseCase<TOrderLine>) => {
  return ({ keys, columns, filter }: TGetModelUseCase<TOrderLineKey>) => {
    if (repository.readModel === undefined)
      throw new Error(
        "Repository method of getModel was not defined in orderLine usecase",
      );

    return repository.readModel({
      model: "orderLine",
      key: keys === undefined ? undefined : isIdPresent(keys) ? keys.id : keys,
      columns: columns,
      filter: filter,
    });
  };
};

export const makeCreateOrderLineBaseUseCase = ({
  generateId,
  validateModel,
  repository,
}: TBaseUseCase<TOrderLine>) => {
  return (modelData: Partial<TOrderLine>) => {
    if (repository.createModel === undefined) {
      throw new Error(
        "Repository method of createModel was not defined in orderLine usecase",
      );
    }

    if (generateId === undefined) {
      throw new Error("Please provide a generateId method");
    }

    const createOrderLine = makeOrderLine({
      validateModel,
    });

    // Generate ID
    modelData.id = generateId();
    // Set CreatedAt
    const sysDate = new Date();
    modelData.createdAt = sysDate;
    // Set UpdatedAt
    modelData.updatedAt = sysDate;
    // Run validation, check exist, column validation will be handled by zod
    // Check if a record with the same id exists
    // Check if the realtionships are valid, i.e primary keys match etc
    // Other validation, such as max, min, length, mandatory checks will be handled by zod
    const orderLine = createOrderLine(modelData);

    return repository.createModel({
      model: "orderLine",
      modelData: orderLine,
    });
  };
};

export const makeUpdateOrderLineBaseUseCase = ({
  validateModel,
  repository,
}: TBaseUseCase<TOrderLine>) => {
  return async (modelData: TOrderLine) => {
    if (repository.updateModel === undefined) {
      throw new Error(
        "Repository method of updateModel was not defined in orderLine usecase",
      );
    }

    if (repository.readModel === undefined) {
      throw new Error(
        "Repository method of readModel was not defined in orderLine usecase",
      );
    }

    const orderLine = await checkOrderLineChanged({
      validateModel,
      repository,
      modelData,
    });

    // Set UpdatedAt
    const sysDate = new Date();
    modelData.updatedAt = sysDate;

    return repository.updateModel({
      model: "orderLine",
      key: orderLine.id,
      modelData: orderLine,
    });
  };
};

export const makeDeleteOrderLineBaseUseCase = ({
  validateModel,
  repository,
}: TBaseUseCase<TOrderLine>) => {
  return async (modelData: TOrderLine) => {
    if (repository.deleteModel === undefined) {
      throw new Error(
        "Repository method of deleteModel was not defined in orderLine usecase",
      );
    }

    const orderLine = await checkOrderLineChanged({
      validateModel,
      repository,
      modelData,
    });

    return repository.deleteModel({
      model: "orderLine",
      key: orderLine.id,
    });
  };
};

const checkOrderLineChanged = async ({
  validateModel,
  repository,
  modelData,
}: TBaseUseCaseCheckChanged<TOrderLine>) => {
  const createOrderLine = makeOrderLine({
    validateModel,
  });
  const readOrderLine = makeReadOrderLineBaseUseCase({
    repository,
  });
  const newOrderLine = createOrderLine(modelData);
  const oldOrderLine = await readOrderLine({
    keys: { id: newOrderLine.id },
  });

  if (newOrderLine.updatedAt.toISOString() !== oldOrderLine[0].updatedAt.toISOString())
    throw new Error("OrderLine is being modified by another user");
  return newOrderLine;
};
