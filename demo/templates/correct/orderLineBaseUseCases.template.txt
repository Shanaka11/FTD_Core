// Generated Code, Do not modify
import {
  checkIfFieldUpdated,
  isIdPresent,
  TBaseUseCase,
  TBaseUseCaseCheckChanged,
  TExecuteQuery,
  TGetModelUseCase,
  TMakeGetModelUseCase,
} from "@five12days/core";

import { checkCustomerOrderExist_ } from "../customerOrder/customerOrderBaseUseCases.gen.js";
import { makeOrderLine, TOrderLine } from "./orderLine.gen.js";
import { readOrderLineUseCase_ } from "./orderLineUseCases.js";

export type TOrderLineKey = {
  orderNo: number;
  lineNo: number;
};

export const makeReadOrderLineBaseUseCase = ({
  repository,
  executeQuery,
}: TMakeGetModelUseCase<TOrderLine>) => {
  return ({ keys, columns, filter }: TGetModelUseCase<TOrderLineKey>) => {
    if (repository.readModel === undefined)
      throw new Error(
        "Repository method of getModel was not defined in orderLine usecase",
      );

    return repository.readModel({
      model: "orderLine",
      key: keys === undefined ? undefined : isIdPresent(keys) ? keys.id : keys,
      columns: columns,
      filter: filter,
    });
  };
};

export const makeCreateOrderLineBaseUseCase = ({
  generateId,
  validateModel,
  repository,
  executeQuery,
}: TBaseUseCase<TOrderLine>) => {
  return (modelData: Partial<TOrderLine>) => {
    if (repository.createModel === undefined) {
      throw new Error(
        "Repository method of createModel was not defined in orderLine usecase",
      );
    }

    if (generateId === undefined) {
      throw new Error("Please provide a generateId method");
    }

    const createOrderLine = makeOrderLine({
      validateModel,
    });

    // Generate ID
    modelData.id = generateId();
    // Set CreatedAt
    const sysDate = new Date();
    modelData.createdAt = sysDate;
    // Set UpdatedAt
    modelData.updatedAt = sysDate;
    // Run validation, check exist, column validation will be handled by zod
    // Check if a record with the same id exists
    // Check if the realtionships are valid, i.e primary keys match etc
    // Other validation, such as max, min, length, mandatory checks will be handled by zod
    const orderLine = createOrderLine(modelData);

    validateRelationships_(orderLine, executeQuery, "INSERT");

    return repository.createModel({
      model: "orderLine",
      modelData: orderLine,
    });
  };
};

export const makeUpdateOrderLineBaseUseCase = ({
  validateModel,
  repository,
  executeQuery,
}: TBaseUseCase<TOrderLine>) => {
  return async (modelData: TOrderLine) => {
    if (repository.updateModel === undefined) {
      throw new Error(
        "Repository method of updateModel was not defined in orderLine usecase",
      );
    }

    if (repository.readModel === undefined) {
      throw new Error(
        "Repository method of readModel was not defined in orderLine usecase",
      );
    }

    const orderLine = await checkOrderLineChanged({
      validateModel,
      repository,
      modelData,
      executeQuery,
    });

    validateRelationships_(orderLine, executeQuery, "MODIFY");

    // Set UpdatedAt
    const sysDate = new Date();
    modelData.updatedAt = sysDate;

    return repository.updateModel({
      model: "orderLine",
      key: orderLine.id,
      modelData: orderLine,
    });
  };
};

export const makeDeleteOrderLineBaseUseCase = ({
  validateModel,
  repository,
  executeQuery,
}: TBaseUseCase<TOrderLine>) => {
  return async (modelData: TOrderLine) => {
    if (repository.deleteModel === undefined) {
      throw new Error(
        "Repository method of deleteModel was not defined in orderLine usecase",
      );
    }

    const orderLine = await checkOrderLineChanged({
      validateModel,
      repository,
      modelData,
      executeQuery,
    });

    return repository.deleteModel({
      model: "orderLine",
      key: orderLine.id,
    });
  };
};

const checkOrderLineChanged = async ({
  validateModel,
  repository,
  modelData,
  executeQuery,
}: TBaseUseCaseCheckChanged<TOrderLine>) => {
  const createOrderLine = makeOrderLine({
    validateModel,
  });
  const readOrderLine = makeReadOrderLineBaseUseCase({
    repository,
    executeQuery
  });
  const newOrderLine = createOrderLine(modelData);
  const oldOrderLine = await readOrderLine({
    keys: { id: newOrderLine.id },
  });

  // Check if the not updatable attributes were updated
  
    checkIfFieldUpdated("lineNo", newOrderLine.lineNo, oldOrderLine[0].lineNo)

  if (newOrderLine.updatedAt.toISOString() !== oldOrderLine[0].updatedAt.toISOString())
    throw new Error("OrderLine is being modified by another user");
  return newOrderLine;
};


const validateRelationships_ = async (
  orderLine: TOrderLine,
  executeQuery: TExecuteQuery,
  action: 'INSERT' | 'MODIFY'
) => {
  // Check if a model exist for the same keys
  await checkOrderLineExist_(
    { orderNo: orderLine.orderNo, lineNo: orderLine.lineNo }, // Generate from keys
    executeQuery,
    action === "INSERT" ? "TRIGGER_WHEN_EXIST" : "TRIGGER_WHEN_NOT_EXIST",
  );

  // Check relationships
  // Check the parent
  await checkCustomerOrderExist_(
    { orderNo: orderLine.orderNo },
    executeQuery,
    "TRIGGER_WHEN_NOT_EXIST",
  );

  // Check the children
  const orderLines = await readOrderLineUseCase_(
    {
      filter: "OrderNo eq " + orderLine.orderNo
    },
    executeQuery,
  );
  if (orderLines.length > 0) {
    throw new Error(
      "orderLine with the " + "OrderNo = " + orderLine.orderNo + " already exist",
    );
  }
  
};

export const checkOrderLineExist_ = async (
  orderLine: TOrderLineKey,
  executeQuery: TExecuteQuery,
  triggerException:
    | "TRIGGER_WHEN_EXIST"
    | "TRIGGER_WHEN_NOT_EXIST"
    | "DO_NO_TRIGGER" = "DO_NO_TRIGGER",
) => {
  const existingOrderLine = await readOrderLineUseCase_(
    { keys: { orderNo: orderLine.orderNo, lineNo: orderLine.lineNo } }, // Generate from keys
    executeQuery,
  );

  if (existingOrderLine.length > 0) {
    if (triggerException === "TRIGGER_WHEN_EXIST")
      throw new Error("OrderLine already exists");
    return true;
  }
  if (triggerException === "TRIGGER_WHEN_NOT_EXIST")
    throw new Error("OrderLine does not exist");
  return false;
};
