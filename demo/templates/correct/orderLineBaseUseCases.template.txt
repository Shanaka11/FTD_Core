// Generated Code, Do not modify
import {
  isIdPresent,
  TBaseUseCase,
  TBaseUseCaseCheckChanged,
  TModelKey,
} from "@five12days/core";

import { makeOrderLine, TOrderLine } from "./orderLine.gen.js";

export type TOrderLineKey = {
  orderNo: number;
  lineNo: number;
};

export const makeReadOrderLineBaseUseCase = ({ repository }: any) => {
  return (keys: TModelKey | TOrderLineKey) => {
    if (isIdPresent(keys)) {
      return repository.readModel(keys.id);
    }
    return repository.readModel(keys);
  };
};

export const makeCreateOrderLineBaseUseCase = ({
  generateId,
  validateModel,
  repository,
}: TBaseUseCase<TOrderLine>) => {
  return (modelData: TOrderLine) => {
    const createOrderLine = makeOrderLine({
      generateId,
      validateModel,
    });

    const orderLine = createOrderLine(modelData);
    return repository.create(orderLine);
  };
};

export const makeUpdateOrderLineBaseUseCase = ({
  generateId,
  validateModel,
  repository,
}: TBaseUseCase<TOrderLine>) => {
  return (modelData: TOrderLine) => {
    const orderLine = checkOrderLineChanged({
      generateId,
      validateModel,
      repository,
      modelData,
    });
    repository.updateModel(orderLine);
  };
};

export const makeDeleteOrderLineBaseUseCase = ({
  generateId,
  validateModel,
  repository,
}: TBaseUseCase<TOrderLine>) => {
  return (modelData: TOrderLine) => {
    const orderLine = checkOrderLineChanged({
      generateId,
      validateModel,
      repository,
      modelData,
    });
    repository.deleteModel(orderLine);
  };
};

const checkOrderLineChanged = ({
  generateId,
  validateModel,
  repository,
  modelData,
}: TBaseUseCaseCheckChanged<TOrderLine>) => {
  const createOrderLine = makeOrderLine({
    generateId,
    validateModel,
  });
  const readOrderLine = makeReadOrderLineBaseUseCase({
    repository,
  });
  const newOrderLine = createOrderLine(modelData);
  const oldOrderLine = readOrderLine({
    id: newOrderLine.id,
  });
  return newOrderLine;
};
