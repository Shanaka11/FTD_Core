// Generated Code, Do not modify
import {
  checkIfFieldUpdated,
  isIdPresent,
  TBaseUseCase,
  TBaseUseCaseCheckChanged,
  TExecuteQuery,
  TGetModelUseCase,
  TMakeGetModelUseCase,
} from "@five12days/core";


import { makeProfile, TProfile } from "./profile.gen.js";
import { readProfileUseCase_ } from "./profileUseCases.js";

export type TProfileKey = {
  profileId: number;
};

export const makeReadProfileBaseUseCase = ({
  repository,
  executeQuery,
}: TMakeGetModelUseCase<TProfile>) => {
  return ({ keys, columns, filter }: TGetModelUseCase<TProfileKey>) => {
    if (repository.readModel === undefined)
      throw new Error(
        "Repository method of getModel was not defined in profile usecase",
      );

    return repository.readModel({
      model: "profile",
      key: keys === undefined ? undefined : isIdPresent(keys) ? keys.id : keys,
      columns: columns,
      filter: filter,
    });
  };
};

export const makeCreateProfileBaseUseCase = ({
  generateId,
  validateModel,
  repository,
  executeQuery,
}: TBaseUseCase<TProfile>) => {
  return (modelData: Partial<TProfile>) => {
    if (repository.createModel === undefined) {
      throw new Error(
        "Repository method of createModel was not defined in profile usecase",
      );
    }

    if (generateId === undefined) {
      throw new Error("Please provide a generateId method");
    }

    const createProfile = makeProfile({
      validateModel,
    });

    // Generate ID
    modelData.id = generateId();
    // Set CreatedAt
    const sysDate = Date.now();
    modelData.createdAt = sysDate;
    // Set UpdatedAt
    modelData.updatedAt = sysDate;
    // Run validation, check exist, column validation will be handled by zod
    // Check if a record with the same id exists
    // Check if the realtionships are valid, i.e primary keys match etc
    // Other validation, such as max, min, length, mandatory checks will be handled by zod
    const profile = createProfile(modelData);

    validateRelationships_(profile, executeQuery, "INSERT");

    return repository.createModel({
      model: "profile",
      modelData: profile,
    });
  };
};

export const makeUpdateProfileBaseUseCase = ({
  validateModel,
  repository,
  executeQuery,
}: TBaseUseCase<TProfile>) => {
  return async (modelData: TProfile) => {
    if (repository.updateModel === undefined) {
      throw new Error(
        "Repository method of updateModel was not defined in profile usecase",
      );
    }

    if (repository.readModel === undefined) {
      throw new Error(
        "Repository method of readModel was not defined in profile usecase",
      );
    }

    const profile = await checkProfileChanged({
      validateModel,
      repository,
      modelData,
      executeQuery,
    });

    validateRelationships_(profile, executeQuery, "MODIFY");

    // Set UpdatedAt
    const sysDate = Date.now();
    modelData.updatedAt = sysDate;

    return repository.updateModel({
      model: "profile",
      key: profile.id,
      modelData: profile,
    });
  };
};

export const makeDeleteProfileBaseUseCase = ({
  validateModel,
  repository,
  executeQuery,
}: TBaseUseCase<TProfile>) => {
  return async (modelData: TProfile) => {
    if (repository.deleteModel === undefined) {
      throw new Error(
        "Repository method of deleteModel was not defined in profile usecase",
      );
    }

    const profile = await checkProfileChanged({
      validateModel,
      repository,
      modelData,
      executeQuery,
    });

    return repository.deleteModel({
      model: "profile",
      key: profile.id,
    });
  };
};

const checkProfileChanged = async ({
  validateModel,
  repository,
  modelData,
  executeQuery,
}: TBaseUseCaseCheckChanged<TProfile>) => {
  const createProfile = makeProfile({
    validateModel,
  });
  const readProfile = makeReadProfileBaseUseCase({
    repository,
    executeQuery
  });
  const newProfile = createProfile(modelData);
  const oldProfile = await readProfile({
    keys: { id: newProfile.id },
  });

  // Check if the not updatable attributes were updated
  checkIfFieldUpdated("profileId", newProfile.profileId, oldProfile[0].profileId)

  if (newProfile.updatedAt !== oldProfile[0].updatedAt)
    throw new Error("Profile is being modified by another user");
  return newProfile;
};


const validateRelationships_ = async (
  profile: TProfile,
  executeQuery: TExecuteQuery,
  action: 'INSERT' | 'MODIFY'
) => {
  // Check if a model exist for the same keys
  await checkProfileExist_(
    { profileId: profile.profileId }, // Generate from keys
    executeQuery,
    action === "INSERT" ? "TRIGGER_WHEN_EXIST" : "TRIGGER_WHEN_NOT_EXIST",
  );

  // Check relationships
  
};

export const checkProfileExist_ = async (
  profile: TProfileKey,
  executeQuery: TExecuteQuery,
  triggerException:
    | "TRIGGER_WHEN_EXIST"
    | "TRIGGER_WHEN_NOT_EXIST"
    | "DO_NO_TRIGGER" = "DO_NO_TRIGGER",
) => {
  const existingProfile = await readProfileUseCase_(
    { keys: { profileId: profile.profileId } }, // Generate from keys
    executeQuery,
  );

  if (existingProfile.length > 0) {
    if (triggerException === "TRIGGER_WHEN_EXIST")
      throw new Error("Profile already exists");
    return true;
  }
  if (triggerException === "TRIGGER_WHEN_NOT_EXIST")
    throw new Error("Profile does not exist");
  return false;
};
