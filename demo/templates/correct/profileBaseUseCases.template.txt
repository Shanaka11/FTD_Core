// Generated Code, Do not modify
import {
  isIdPresent,
  TBaseUseCase,
  TBaseUseCaseCheckChanged,
  TGetModelUseCase,
  TMakeGetModelUseCase,
} from "@five12days/core";

import { makeProfile, TProfile } from "./profile.gen.js";

export type TProfileKey = {
  profileId: number;
};

export const makeReadProfileBaseUseCase = ({ repository }: TMakeGetModelUseCase) => {
  return ({ keys, columns, filter }: TGetModelUseCase<TProfileKey>) => {
    if (repository.readModel === undefined)
      throw new Error(
        "Repository method of getModel was not defined in profile usecase",
      );

    return repository.readModel({
      model: "profile",
      key: keys === undefined ? undefined : isIdPresent(keys) ? keys.id : keys,
      columns: columns,
      filter: filter,
    });
  };  
};

export const makeCreateProfileBaseUseCase = ({
  generateId,
  validateModel,
  repository,
}: TBaseUseCase<TProfile>) => {
  return (modelData: TProfile) => {
    if (repository.createModel === undefined) {
      throw new Error(
        "Repository method of createModel was not defined in profile usecase",
      );
    }

    const createProfile = makeProfile({
      generateId,
      validateModel,
    });

    const profile = createProfile(modelData);

    return repository.createModel({
      model: "profile",
      modelData: profile,
    });
  };  
};

export const makeUpdateProfileBaseUseCase = ({
  generateId,
  validateModel,
  repository,
}: TBaseUseCase<TProfile>) => {
  return (modelData: TProfile) => {
    if (repository.updateModel === undefined) {
      throw new Error(
        "Repository method of updateModel was not defined in profile usecase",
      );
    }

    const profile = checkProfileChanged({
      generateId,
      validateModel,
      repository,
      modelData,
    });

    repository.updateModel({
      model: "profile",
      key: profile.id,
      modelData: profile,
    });
  };
};

export const makeDeleteProfileBaseUseCase = ({
  generateId,
  validateModel,
  repository,
}: TBaseUseCase<TProfile>) => {
  return (modelData: TProfile) => {
    if (repository.deleteModel === undefined) {
      throw new Error(
        "Repository method of deleteModel was not defined in profile usecase",
      );
    }

    const profile = checkProfileChanged({
      generateId,
      validateModel,
      repository,
      modelData,
    });

    repository.deleteModel({
      model: "profile",
      key: profile.id,
    });
  };
};

const checkProfileChanged = ({
  generateId,
  validateModel,
  repository,
  modelData,
}: TBaseUseCaseCheckChanged<TProfile>) => {
  const createProfile = makeProfile({
    generateId,
    validateModel,
  });
  const readProfile = makeReadProfileBaseUseCase({
    repository,
  });
  const newProfile = createProfile(modelData);
  const oldProfile = readProfile({
    keys: { id: newProfile.id },
  });
  return newProfile;
};
