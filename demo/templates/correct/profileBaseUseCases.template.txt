// Generated Code, Do not modify
import {
  isIdPresent,
  TBaseUseCase,
  TBaseUseCaseCheckChanged,
  TModelKey,
} from "@five12days/core";

import { makeProfile, TProfile } from "./profile.gen.js";

export type TProfileKey = {
  profileId: number;
};

export const makeReadProfileBaseUseCase = ({ repository }: any) => {
  return (keys: TModelKey | TProfileKey) => {
    if (isIdPresent(keys)) {
      return repository.readModel(keys.id);
    }
    return repository.readModel(keys);
  };
};

export const makeCreateProfileBaseUseCase = ({
  generateId,
  validateModel,
  repository,
}: TBaseUseCase<TProfile>) => {
  return (modelData: TProfile) => {
    const createProfile = makeProfile({
      generateId,
      validateModel,
    });

    const profile = createProfile(modelData);
    return repository.create(profile);
  };
};

export const makeUpdateProfileBaseUseCase = ({
  generateId,
  validateModel,
  repository,
}: TBaseUseCase<TProfile>) => {
  return (modelData: TProfile) => {
    const profile = checkProfileChanged({
      generateId,
      validateModel,
      repository,
      modelData,
    });
    repository.updateModel(profile);
  };
};

export const makeDeleteProfileBaseUseCase = ({
  generateId,
  validateModel,
  repository,
}: TBaseUseCase<TProfile>) => {
  return (modelData: TProfile) => {
    const profile = checkProfileChanged({
      generateId,
      validateModel,
      repository,
      modelData,
    });
    repository.deleteModel(profile);
  };
};

const checkProfileChanged = ({
  generateId,
  validateModel,
  repository,
  modelData,
}: TBaseUseCaseCheckChanged<TProfile>) => {
  const createProfile = makeProfile({
    generateId,
    validateModel,
  });
  const readProfile = makeReadProfileBaseUseCase({
    repository,
  });
  const newProfile = createProfile(modelData);
  const oldProfile = readProfile({
    id: newProfile.id,
  });
  return newProfile;
};
