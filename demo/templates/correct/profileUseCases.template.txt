import {
  makeCreateModel,
  makeDeleteModel,
  makeReadModel,
  makeUpdateModel,
  TGetModelUseCase,
  generateId,
} from "@five12days/core";

import { TProfile } from "./profile.gen";
import {
  makeCreateProfileBaseUseCase,
  makeDeleteProfileBaseUseCase,
  makeReadProfileBaseUseCase,
  makeUpdateProfileBaseUseCase,
  TProfileKey,
} from "./profileBaseUseCases.gen";

const executeQuery = (query: string) => [query];
const validateModel = () => true;

export const readProfileUseCase = ({
  keys,
  columns,
  filter,
}: TGetModelUseCase<TProfileKey>) => {
  const readProfileBaseUseCase = makeReadProfileBaseUseCase({
    repository: { readModel: makeReadModel(executeQuery) },
  });
  const profiles = readProfileBaseUseCase({ keys, columns, filter });
  // Add business logic that should be executed after the core method

  return profiles;
};

export const makeCreateProfileUseCase = (profileData: TProfile) => {
  // Add business logic that should be executed before the core method
  const createProfileBaseUseCase = makeCreateProfileBaseUseCase({
    generateId,
    validateModel,
    repository: { 
      readModel: makeReadModel(executeQuery),
      createModel: makeCreateModel(executeQuery),
    },
  });

  const createdProfile = createProfileBaseUseCase(profileData);
  // Add business logic that should be executed after the core method

  return createdProfile;
};

export const makeUpdateProfileUseCase = (profileData: TProfile) => {
  // Add business logic that should be executed before the core method
  const updateProfileBaseUseCase = makeUpdateProfileBaseUseCase({
    generateId,
    validateModel,
    repository: { 
      readModel: makeReadModel(executeQuery),
      updateModel: makeUpdateModel(executeQuery),
    },
  });

  const updatedProfile = updateProfileBaseUseCase(profileData);
  // Add business logic that should be executed after the core method

  return updatedProfile;
};

export const makeDeleteProfileUseCase = (profileData: TProfile) => {
  // Add business logic that should be executed before the core method
  const deleteProfileBaseUseCase = makeDeleteProfileBaseUseCase({
    generateId,
    validateModel,
    repository: { 
      readModel: makeReadModel(executeQuery),
      deleteModel: makeDeleteModel(executeQuery),
    },
  });

  const deletedProfile = deleteProfileBaseUseCase(profileData);
  // Add business logic that should be executed after the core method

  return deletedProfile;
};
