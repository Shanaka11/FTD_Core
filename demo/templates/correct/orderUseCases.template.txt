import {
  makeCreateModel,
  makeDeleteModel,
  makeReadModel,
  makeUpdateModel,
  TGetModelUseCase,
  generateId,
} from "@five12days/core";

import { TOrder } from "./order.gen";
import {
  makeCreateOrderBaseUseCase,
  makeDeleteOrderBaseUseCase,
  makeReadOrderBaseUseCase,
  makeUpdateOrderBaseUseCase,
  TOrderKey,
} from "./orderBaseUseCases.gen";

const executeQuery = (query: string) => [query];
const validateModel = () => true;

export const readOrderUseCase = ({
  keys,
  columns,
  filter,
}: TGetModelUseCase<TOrderKey>) => {
  const readOrderBaseUseCase = makeReadOrderBaseUseCase({
    repository: { readModel: makeReadModel(executeQuery) },
  });
  const orders = readOrderBaseUseCase({ keys, columns, filter });
  // Add business logic that should be executed after the core method

  return orders;
};

export const makeCreateOrderUseCase = (orderData: TOrder) => {
  // Add business logic that should be executed before the core method
  const createOrderBaseUseCase = makeCreateOrderBaseUseCase({
    generateId,
    validateModel,
    repository: { 
      readModel: makeReadModel(executeQuery),
      createModel: makeCreateModel(executeQuery),
    },
  });

  const createdOrder = createOrderBaseUseCase(orderData);
  // Add business logic that should be executed after the core method

  return createdOrder;
};

export const makeUpdateOrderUseCase = (orderData: TOrder) => {
  // Add business logic that should be executed before the core method
  const updateOrderBaseUseCase = makeUpdateOrderBaseUseCase({
    generateId,
    validateModel,
    repository: { 
      readModel: makeReadModel(executeQuery),
      updateModel: makeUpdateModel(executeQuery),
    },
  });

  const updatedOrder = updateOrderBaseUseCase(orderData);
  // Add business logic that should be executed after the core method

  return updatedOrder;
};

export const makeDeleteOrderUseCase = (orderData: TOrder) => {
  // Add business logic that should be executed before the core method
  const deleteOrderBaseUseCase = makeDeleteOrderBaseUseCase({
    generateId,
    validateModel,
    repository: { 
      readModel: makeReadModel(executeQuery),
      deleteModel: makeDeleteModel(executeQuery),
    },
  });

  const deletedOrder = deleteOrderBaseUseCase(orderData);
  // Add business logic that should be executed after the core method

  return deletedOrder;
};
