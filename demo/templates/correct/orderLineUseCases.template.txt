import {
  executeTransaction,
  generateId,
  makeCreateModel,
  makeDeleteModel,
  makeReadModel,
  makeUpdateModel,
  TExecuteQuery,
  TGetModelUseCase,
  TRawData,
  validateModel,
} from "@five12days/core";

import { orderLineSchema, TOrderLine } from "./orderLine.gen.js";
import {
  makeCreateOrderLineBaseUseCase,
  makeDeleteOrderLineBaseUseCase,
  makeReadOrderLineBaseUseCase,
  makeUpdateOrderLineBaseUseCase,
  TOrderLineKey,
} from "./orderLineBaseUseCases.gen.js";

const validateOrderLineModel = (data: TRawData) => {
  return validateModel<TOrderLine>(orderLineSchema, data);
};

// READ
export const readOrderLineUseCase_ = async (
  { keys, columns, filter, orderBy }: TGetModelUseCase<TOrderLineKey>,
  executeQuery: TExecuteQuery,
) => {
  // Add business logic that should be executed before the core method
  const readOrderLineBaseUseCase = makeReadOrderLineBaseUseCase({
    repository: { readModel: makeReadModel(executeQuery) },
    executeQuery,
  });
  const orderLines = await readOrderLineBaseUseCase({
    keys,
    columns,
    filter,
    orderBy,
  });
  // Add business logic that should be executed after the core method

  return orderLines;
};

export const readOrderLineUseCase = async (data: TGetModelUseCase<TOrderLineKey>) => {
  const retData = await executeTransaction<
    TGetModelUseCase<TOrderLineKey>,
    TOrderLine[]
  >(data, readOrderLineUseCase_);
  return retData;
};

// CREATE
export const createOrderLineUseCase_ = async (
  orderLineData: Partial<TOrderLine>,
  executeQuery: TExecuteQuery,
) => {
  // Add business logic that should be executed before the core method
  const createOrderLineBaseUseCase = makeCreateOrderLineBaseUseCase({
    generateId,
    validateModel: validateOrderLineModel,
    repository: {
      readModel: makeReadModel(executeQuery),
      createModel: makeCreateModel(executeQuery),      
    },
    executeQuery,
  });

  const createdOrderLine = await createOrderLineBaseUseCase(orderLineData);
  // Add business logic that should be executed after the core method

  return createdOrderLine;
};

export const createOrderLineUseCase = async (data: Partial<TOrderLine>) => {
  const retData = await executeTransaction<Partial<TOrderLine>, boolean>(
    data,
    createOrderLineUseCase_,
  );

  return retData;
};

// UPDATE
export const updateOrderLineUseCase_ = async (
  orderLineData: TOrderLine,
  executeQuery: TExecuteQuery,
) => {
  // Add business logic that should be executed before the core method
  const updateOrderLineBaseUseCase = makeUpdateOrderLineBaseUseCase({
    generateId,
    validateModel: validateOrderLineModel,
    repository: {
      readModel: makeReadModel(executeQuery),
      updateModel: makeUpdateModel(executeQuery),      
    },
    executeQuery,
  });

  const updatedOrderLine = await updateOrderLineBaseUseCase(orderLineData);
  // Add business logic that should be executed after the core method

  return updatedOrderLine;
};

export const updateOrderLineUseCase = async (data: TOrderLine) => {
  const retData = await executeTransaction<TOrderLine, boolean>(
    data,
    updateOrderLineUseCase_,
  );

  return retData;
};

// DELETE
export const deleteOrderLineUseCase_ = async (
  orderLineData: TOrderLine,
  executeQuery: TExecuteQuery,
) => {
  // Add business logic that should be executed before the core method
  const deleteOrderLineBaseUseCase = makeDeleteOrderLineBaseUseCase({
    generateId,
    validateModel: validateOrderLineModel,
    repository: {
      readModel: makeReadModel(executeQuery),
      deleteModel: makeDeleteModel(executeQuery),      
    },
    executeQuery,
  });

  const deletedOrderLine = deleteOrderLineBaseUseCase(orderLineData);
  // Add business logic that should be executed after the core method

  return deletedOrderLine;
};

export const deleteOrderLineUseCase = async (data: TOrderLine) => {
  const retData = await executeTransaction<TOrderLine, boolean>(
    data,
    deleteOrderLineUseCase_,
  );

  return retData;
};
